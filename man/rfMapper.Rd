% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RFQTL.R
\name{rfMapper}
\alias{rfMapper}
\title{Main function for RF QTL mapping}
\usage{
rfMapper(mappingData, nTrait = NULL, permutationGroups = NULL, permute,
  nPermutations = 1000, nforest, ntree, file = NULL, nCl = 1,
  clType = "SOCK", pMat = NULL)
}
\arguments{
\item{mappingData}{A list containing all necessary information to map
a trait as returned by \code{preMap}.}

\item{nTrait}{If the phenotype in mapping data is a matrix, nTrait 
specifies which of the multiple traits provided should be mapped.
Should be a single integer.}

\item{permutationGroups}{Optional; list with an entry for each sample
indicating within which group it may be permuted. Entries may 
contain more than one integer. If this is the case, one is chosen
randomly. Samples with the same integer may be permuted. If this
list is not provided, all samples are assumed to be in the 
same permutation-group.}

\item{permute}{Logical indicating whether permutations should be
performed (if FALSE the real trait-values are used).}

\item{nPermutations}{Number of permutations to be performed. 
If permute is false, nPermutations is ignored.}

\item{nforest}{Number of randomized imputations for missing genotypes}

\item{ntree}{Number of trees to grow per subforest}

\item{file}{Optional; if the results are to be saved as a file,
this argument specifies the file paths}

\item{nCl}{Integer; number of cores to use}

\item{clType}{Character; type of cluster to create. 
Has to be a cluster-type implemented in snow.}

\item{pMat}{Optional; matrix containing predefined permutation 
schemes. The number of rows has to equal the number of samples and 
the number of columns has to equal the number of permutations.}
}
\value{
For unpermuted traits: a numerical vector with importance 
 scores for all predictors aside from those in exclude. For permuted
 traits: a matrix of scores with one column per permutation
}
\description{
Wrapper function for qtl mapping with random forest.
}
\examples{
data("RFQTLgenotype")
data("RFQTLphenotype")
sampleInfo <- sapply(strainNames,FUN=function(x){
   which(rownames(genotype)==x)
   })
mappingData <- preMap(genotype=genotype,
                      phenotype=phenotype,
                      sampleInfo=sampleInfo,
                      scale=T)
library(randomForest)
scores <- rfMapper(mappingData = mappingData,
                   permute = F,
                   nforest = 100,
                   ntree = 150)
}
